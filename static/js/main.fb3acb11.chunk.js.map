{"version":3,"sources":["store/stopwatch/constants.js","store/stopwatch/actions.js","components/stopwatch/buttons/StartPauseButton.jsx","components/stopwatch/buttons/LogButton.jsx","components/stopwatch/buttons/ResetButton.jsx","components/stopwatch/buttons/ClearButton.jsx","components/stopwatch/ButtonPanel.jsx","components/stopwatch/values/TimerValue.jsx","components/stopwatch/values/TimeValue.jsx","components/stopwatch/ValuePanel.jsx","components/stopwatch/LogPanel.jsx","components/stopwatch/Stopwatch.jsx","logo.ico","components/footer/Footer.jsx","App.js","reportWebVitals.js","utils/timeUtils.js","store/stopwatch/reducers.js","store/index.js","index.js"],"names":["TOGGLE_TIMER","RESET_TIMER","UPDATE_TIMER","LOG","UPDATE_LOG_ITEM","CLEAR","toggle_timer","type","StartPauseButton","dispatch","useDispatch","useSelector","state","stopwatch","isRunning","className","onClick","LogButton","ResetButton","ClearButton","ButtonPanel","TimerValue","timer","formatedTimer","timerLabel","style","textAlign","TimeValue","time","formatedTime","timeLabel","ValuePanel","LogPanel","log","actionLabel","noteLabel","logItems","map","item","i","action","value","note","onChange","e","payload","id","target","length","Stopwatch","margin","Footer","src","logo","alt","href","rel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","formatTimeDifference","miliseconds","Math","round","seconds","floor","minutes","hours","days","secondsAsString","normalizeNumber","minutesAsString","hoursAsString","daysAsString","formatTime","getSeconds","getMinutes","getHours","number","initialState","lastUpdateTime","Date","now","stopwatchReducer","newLog","concat","deltaTime","index","findIndex","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","setInterval","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb3acb11.chunk.js","sourcesContent":["//Action types\nexport const TOGGLE_TIMER = 'TOGGLE_TIMER'\nexport const RESET_TIMER = 'RESET_TIMER'\nexport const UPDATE_TIMER = 'UPDATE_TIMER'\nexport const UPDATE_CLOCK = 'UPDATE_CLOCK'\nexport const LOG = 'LOG'\nexport const UPDATE_LOG_ITEM = 'UPDATE_LOG_ITEM'\nexport const CLEAR = 'CLEAR'\n\nexport const INITIAL_TIMER = 0 //Date.now() difference\n\n//Views\nexport const ACTION_LABEL = 'Action'\nexport const TIMER_LABEL = 'Timer'\nexport const TIME_LABEL = \"Clock\"\nexport const NOTE_LABEL = 'Comment it!'\n","import { TOGGLE_TIMER } from './constants'\nimport { RESET_TIMER } from './constants'\nimport { UPDATE_TIMER } from './constants'\nimport { UPDATE_CLOCK } from './constants'\nimport { LOG } from './constants'\nimport { UPDATE_LOG_ITEM } from './constants'\nimport { CLEAR } from './constants'\n\nexport const toggle_timer = () => {\n  return ({\n    type: TOGGLE_TIMER\n  })\n}\n\nexport const reset_timer = () => {\n  return ({\n    type: RESET_TIMER\n  })\n}\n\nexport const update_timer = (deltaTime) => {\n  return {\n    type: UPDATE_TIMER,\n    payload: { deltaTime }\n  }\n}\n\nexport const update_clock = () => {\n  return ({\n    type: UPDATE_CLOCK\n  })\n}\n\nexport const log = () => {\n  return ({\n    type: LOG\n  })\n}\n\nexport const updateLogItem = (payload) => {\n  return ({\n    type: UPDATE_LOG_ITEM,\n    payload: payload\n  })\n}\n\nexport const clearLog = () => {\n  return ({\n    type: CLEAR\n  })\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { toggle_timer } from '../../../store/stopwatch/actions'\n\nconst StartPauseButton = () => {\n    const dispatch = useDispatch()\n    const isRunning = useSelector((state) => state.stopwatch.isRunning)\n\n    return isRunning ? (\n        <button className='button-pause' onClick={() => dispatch(toggle_timer())}>\n            Pause\n        </button>\n    ) : (\n        <button className='button-start' onClick={() => dispatch(toggle_timer())}>\n            Start\n        </button>\n    )\n}\n\nexport default StartPauseButton","import { useDispatch } from 'react-redux'\nimport { log } from '../../../store/stopwatch/actions'\n\nconst LogButton = () => {\n    const dispatch = useDispatch()\n\n    return (\n        <button className='button-medium' onClick={() => dispatch(log())}>\n            Log\n        </button>\n    )\n}\n\nexport default LogButton","import { useDispatch } from 'react-redux'\nimport { reset_timer } from '../../../store/stopwatch/actions'\n\nconst ResetButton = () => {\n    const dispatch = useDispatch()\n\n    return (\n        <button className='button-medium' onClick={() => dispatch(reset_timer())}>\n            Reset\n        </button>\n    )\n}\n\nexport default ResetButton","import { useDispatch } from 'react-redux'\nimport { clearLog } from '../../../store/stopwatch/actions'\n\nconst ClearButton = () => {\n    const dispatch = useDispatch()\n\n    return (\n        <button className='button-small' onClick={() => dispatch(clearLog())}>Clear</button>\n    )\n}\n\nexport default ClearButton","import StartPauseButton from './buttons/StartPauseButton'\nimport LogButton from './buttons/LogButton'\nimport ResetButton from './buttons/ResetButton'\nimport ClearButton from './buttons/ClearButton'\n\nconst ButtonPanel = () => {\n    return (\n        <div>\n            <StartPauseButton />\n            <LogButton />\n            <ResetButton />\n            <ClearButton />\n        </div>\n    )\n}\n\nexport default ButtonPanel","import { useSelector } from 'react-redux'\n\nconst TimerValue = () => {\n    const timer = useSelector((state) => state.stopwatch.formatedTimer)\n    const timerLabel = useSelector((state) => state.stopwatch.timerLabel)\n    const isRunning = useSelector((state) => state.stopwatch.isRunning)\n\n    return (\n        <div className='value-box'>\n            {\n                isRunning ? (\n                    <div className='value-large-started'>{timer}</div>\n                ) : (\n                    <div className='value-large-stopped'>{timer}</div>\n                )\n            }\n            <div style={{textAlign: 'center'}}>{timerLabel}</div>\n        </div>\n    )\n}\n\nexport default TimerValue\n","import { useSelector } from 'react-redux'\n\nconst TimeValue = () => {\n    const time = useSelector((state) => state.stopwatch.formatedTime)\n    const timeLabel = useSelector((state) => state.stopwatch.timeLabel)\n\n    return (\n        <div className='value-box'>\n            <div className='value-large'>{time}</div>\n            <div className='value-label'>{timeLabel}</div>\n        </div>\n    )\n}\n\nexport default TimeValue","import TimerValue from './values/TimerValue'\nimport TimeValue from './values/TimeValue'\n\nconst ValuePanel = () => {\n    return (\n        <div className='value-panel'>\n            <TimerValue />\n            <TimeValue />\n        </div>\n    )\n}\n\nexport default ValuePanel\n","import { useSelector, useDispatch } from 'react-redux'\nimport { updateLogItem } from '../../store/stopwatch/actions'\n\nconst LogPanel = () => {\n    const log = useSelector((state) => state.stopwatch.log)\n    const dispatch = useDispatch()\n    const actionLabel = useSelector((state) => state.stopwatch.actionLabel)\n    const timerLabel = useSelector((state) => state.stopwatch.timerLabel)\n    const timeLabel = useSelector((state) => state.stopwatch.timeLabel)\n    const noteLabel = useSelector((state) => state.stopwatch.noteLabel)\n\n    const logItems = log.map((item, i) => {\n        return (\n            <tr key={`timer-${i}`}>\n                <td>{item.action}</td>\n                <td>{item.timer}</td>\n                <td>{item.time}</td>\n\n                <td><input\n                    type='text'\n                    value={item.note}\n                    onChange={(e) => dispatch(updateLogItem({ id: item.id, note: e.target.value }))}\n                    className='log-input' />\n                </td>\n            </tr>\n        )\n    })\n\n    return (\n        log.length > 0 ?\n            <table>\n                <thead>\n                    <tr>\n                        <th>{actionLabel}</th>\n                        <th>{timerLabel}</th>\n                        <th>{timeLabel}</th>\n                        <th>{noteLabel}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {logItems}\n                </tbody>\n            </table>\n            :\n            null\n    )\n}\n\nexport default LogPanel","import ButtonPanel from './ButtonPanel'\nimport ValuePanel from './ValuePanel'\nimport LogPanel from './LogPanel'\n\nconst Stopwatch = () => {\n    return (\n        <div style={{margin:'0px 0px 10rem 0px'}}>\n            <ButtonPanel />\n            <ValuePanel />\n            <LogPanel />\n        </div>\n    )\n}\n\nexport default Stopwatch","export default __webpack_public_path__ + \"static/media/logo.143b9541.ico\";","import logo from '../../logo.ico';\n\nconst Footer = () => (\n    <div className=\"footer\">\n        <p className='footer-heading'><img src={logo} alt=\"logo\" className=\"logo\" />\n            Stopwatch\n        </p>\n\n        <p className='footer-content'>\n            This is a simple stopwatch application.\n        </p>\n\n        <p className='footer-content'>\n            You can find more information on <a\n                className=\"link\"\n                href=\"https://github.com/26bricks/stopwatch/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\">\n                GitHub\n            </a>\n            .\n        </p>\n    </div>\n)\n\nexport default Footer\n","import './App.scss';\nimport Stopwatch from './components/stopwatch/Stopwatch'\nimport Footer from './components/footer/Footer'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Stopwatch />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const formatTimeDifference = (time) => {\n    const miliseconds = Math.round(time / 100) % 10\n    const seconds = Math.floor(time / 1000) % 60\n    const minutes = Math.floor(time / 1000 / 60) % 60\n    const hours = Math.floor(time / 1000 / 60 / 60) % 24\n    const days = Math.floor(time / 1000 / 60 / 60 / 24)\n\n    const secondsAsString = normalizeNumber(seconds)\n    const minutesAsString = normalizeNumber(minutes)\n    const hoursAsString = normalizeNumber(hours)\n    const daysAsString = normalizeNumber(days)\n\n    return `${daysAsString}:${hoursAsString}:${minutesAsString}:${secondsAsString}.${miliseconds}`\n}\n\nexport const formatTime = (time) => {\n\n    const seconds = time.getSeconds()\n    const minutes = time.getMinutes()\n    const hours = time.getHours()\n\n    const secondsAsString = normalizeNumber(seconds)\n    const minutesAsString = normalizeNumber(minutes)\n    const hoursAsString = normalizeNumber(hours)\n\n    return `${hoursAsString}:${minutesAsString}:${secondsAsString}`\n}\n\nconst normalizeNumber = (number) => {\n    return number < 10 ? \"0\" + number : number;\n}","import { TOGGLE_TIMER } from './constants'\nimport { RESET_TIMER } from './constants'\nimport { UPDATE_TIMER } from './constants'\nimport { LOG } from './constants'\nimport { CLEAR } from './constants'\n\nimport {\n    INITIAL_TIMER, ACTION_LABEL, UPDATE_LOG_ITEM, TIMER_LABEL,\n    TIME_LABEL, NOTE_LABEL\n} from './constants'\nimport { formatTimeDifference, formatTime } from '../../utils/timeUtils'\n\nconst initialState = {\n    isRunning: false,\n    lastUpdateTime: Date.now(),\n    timer: INITIAL_TIMER,\n    formatedTimer: formatTimeDifference(INITIAL_TIMER),\n    formatedTime: formatTime(new Date()),\n    log: [],\n    actionLabel: ACTION_LABEL,\n    timerLabel: TIMER_LABEL,\n    timeLabel: TIME_LABEL,\n    noteLabel: NOTE_LABEL\n}\n\nconst stopwatchReducer = (state = initialState, action) => {\n\n    const log = (action) => {\n        const newLog = [...state.log]\n\n        return (\n            [{\n                id: Date.now(),\n                action: action,\n                timer: formatTimeDifference(state.timer),\n                time: formatTime(new Date()),\n                note: action == 'Reset' ? '' : ''  //Prepared for an automatic description\n            }].concat(newLog)\n        )\n    }\n\n    switch (action.type) {\n\n        case TOGGLE_TIMER:\n            return {\n                ...state, isRunning: !state.isRunning,\n                log: state.isRunning ? log('Pause') : log('Start')\n            }\n\n        case RESET_TIMER:\n            return {\n                ...state,\n                isRunning: false,\n                timer: INITIAL_TIMER,\n                formatedTimer: formatTimeDifference(INITIAL_TIMER),\n                log: log('Reset')\n            }\n\n        case UPDATE_TIMER:\n            const now = Date.now()\n            const deltaTime = now - state.lastUpdateTime\n\n            return state.isRunning ?\n                {\n                    ...state,\n                    timer: state.timer + deltaTime,\n                    formatedTimer: formatTimeDifference(state.timer + deltaTime),\n                    formatedTime: formatTime(new Date()),\n                    lastUpdateTime: now\n                }\n                :\n                {\n                    ...state,\n                    formatedTime: formatTime(new Date())\n                }\n\n        case LOG:\n            return {\n                ...state,\n                log: log('Log')\n            }\n\n        case UPDATE_LOG_ITEM:\n            const index = state.log.findIndex(item => item.id === action.payload.id)\n            const newLog = [...state.log]\n            newLog[index].note = action.payload.note\n\n            return {\n                ...state,\n                log: newLog\n            }\n\n        case CLEAR:\n            return {\n                ...state,\n                isRunning: false,\n                timer: INITIAL_TIMER,\n                formatedTimer: formatTimeDifference(INITIAL_TIMER),\n                log: []\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default stopwatchReducer","import { combineReducers } from 'redux'\nimport stopwatchReducer from './stopwatch/reducers'\nimport { createStore } from 'redux';\n\nconst reducers = combineReducers({\n    stopwatch: stopwatchReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\nconst store = createStore(reducers, composeEnhancers);\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/index'\nimport { Provider } from 'react-redux'\nimport { update_timer } from './store/stopwatch/actions'\n\nsetInterval(() => {\n  store.dispatch(update_timer())\n}, 50)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}