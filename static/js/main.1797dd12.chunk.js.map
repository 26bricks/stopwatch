{"version":3,"sources":["reportWebVitals.js","store/stopwatch/constants.js","utils/timeUtils.js","store/stopwatch/reducers.js","store/index.js","store/stopwatch/actions.js","components/stopwatch/buttons/StartPauseButton.jsx","components/stopwatch/buttons/LogButton.jsx","components/stopwatch/buttons/ResetButton.jsx","components/stopwatch/buttons/ClearButton.jsx","components/stopwatch/ButtonPanel.jsx","components/stopwatch/values/TimerValue.jsx","components/stopwatch/values/TimeValue.jsx","components/stopwatch/ValuePanel.jsx","components/stopwatch/LogPanel.jsx","components/stopwatch/Stopwatch.jsx","logo.ico","components/footer/Footer.jsx","App.js","components/AppWrapper.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TOGGLE_TIMER","RESET_TIMER","UPDATE_TIMER","LOG","UPDATE_LOG_ITEM","CLEAR","formatTimeDifference","time","miliseconds","Math","round","seconds","floor","minutes","hours","days","secondsAsString","normalizeNumber","minutesAsString","hoursAsString","daysAsString","formatTime","getSeconds","getMinutes","getHours","number","initialState","isRunning","lastUpdateTime","Date","now","timer","formatedTimer","formatedTime","log","actionLabel","timerLabel","timeLabel","noteLabel","stopwatchReducer","state","action","newLog","id","note","concat","type","deltaTime","index","findIndex","item","payload","reducers","combineReducers","stopwatch","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","toggle_timer","StartPauseButton","dispatch","useDispatch","useSelector","className","onClick","LogButton","ResetButton","ClearButton","ButtonPanel","TimerValue","style","textAlign","TimeValue","ValuePanel","LogPanel","logItems","map","i","value","onChange","e","target","length","Stopwatch","margin","Footer","src","logo","alt","href","rel","App","AppWrapper","StrictMode","setInterval","ReactDOM","render","document","getElementById"],"mappings":"4LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBCNDQ,EAAe,eACfC,EAAc,cACdC,EAAe,eAEfC,EAAM,MACNC,EAAkB,kBAClBC,EAAQ,QCPRC,EAAuB,SAACC,GACjC,IAAMC,EAAcC,KAAKC,MAAMH,EAAO,KAAO,GACvCI,EAAUF,KAAKG,MAAML,EAAO,KAAQ,GACpCM,EAAUJ,KAAKG,MAAML,EAAO,IAAO,IAAM,GACzCO,EAAQL,KAAKG,MAAML,EAAO,IAAO,GAAK,IAAM,GAC5CQ,EAAON,KAAKG,MAAML,EAAO,IAAO,GAAK,GAAK,IAE1CS,EAAkBC,EAAgBN,GAClCO,EAAkBD,EAAgBJ,GAClCM,EAAgBF,EAAgBH,GAChCM,EAAeH,EAAgBF,GAErC,MAAM,GAAN,OAAUK,EAAV,YAA0BD,EAA1B,YAA2CD,EAA3C,YAA8DF,EAA9D,YAAiFR,IAGxEa,EAAa,SAACd,GAEvB,IAAMI,EAAUJ,EAAKe,aACfT,EAAUN,EAAKgB,aACfT,EAAQP,EAAKiB,WAEbR,EAAkBC,EAAgBN,GAClCO,EAAkBD,EAAgBJ,GAClCM,EAAgBF,EAAgBH,GAEtC,MAAM,GAAN,OAAUK,EAAV,YAA2BD,EAA3B,YAA8CF,IAG5CC,EAAkB,SAACQ,GACrB,OAAOA,EAAS,GAAK,IAAMA,EAASA,GCjBlCC,EAAe,CACjBC,WAAW,EACXC,eAAgBC,KAAKC,MACrBC,MFNyB,EEOzBC,cAAe1B,EFPU,GEQzB2B,aAAcZ,EAAW,IAAIQ,MAC7BK,IAAK,GACLC,YFPwB,SEQxBC,WFPuB,QEQvBC,UFPsB,QEQtBC,UFPsB,eE2FXC,EAjFU,WAAmC,IAAlCC,EAAiC,uDAAzBd,EAAce,EAAW,uCAEjDP,EAAM,SAACO,GACT,IAAMC,EAAM,YAAOF,EAAMN,KAEzB,MACI,CAAC,CACGS,GAAId,KAAKC,MACTW,OAAQA,EACRV,MAAOzB,EAAqBkC,EAAMT,OAClCxB,KAAMc,EAAW,IAAIQ,MACrBe,KAA2B,KAC5BC,OAAOH,IAIlB,OAAQD,EAAOK,MAEX,KAAK9C,EACD,OAAO,2BACAwC,GADP,IACcb,WAAYa,EAAMb,UAC5BO,IAAKM,EAAMb,UAAYO,EAAI,SAAWA,EAAI,WAGlD,KAAKjC,EACD,OAAO,2BACAuC,GADP,IAEIb,WAAW,EACXI,MF5Ca,EE6CbC,cAAe1B,EF7CF,GE8Cb4B,IAAKA,EAAI,WAGjB,KAAKhC,EACD,IAAM4B,EAAMD,KAAKC,MACXiB,EAAYjB,EAAMU,EAAMZ,eAE9B,OAAOY,EAAMb,UAAN,2BAEIa,GAFJ,IAGCT,MAAOS,EAAMT,MAAQgB,EACrBf,cAAe1B,EAAqBkC,EAAMT,MAAQgB,GAClDd,aAAcZ,EAAW,IAAIQ,MAC7BD,eAAgBE,IANjB,2BAUIU,GAVJ,IAWCP,aAAcZ,EAAW,IAAIQ,QAGzC,KAAK1B,EACD,OAAO,2BACAqC,GADP,IAEIN,IAAKA,EAAI,SAGjB,KAAK9B,EACD,IAAM4C,EAAQR,EAAMN,IAAIe,WAAU,SAAAC,GAAI,OAAIA,EAAKP,KAAOF,EAAOU,QAAQR,MAC/DD,EAAM,YAAOF,EAAMN,KAGzB,OAFAQ,EAAOM,GAAOJ,KAAOH,EAAOU,QAAQP,KAE7B,2BACAJ,GADP,IAEIN,IAAKQ,IAGb,KAAKrC,EACD,OAAO,2BACAmC,GADP,IAEIb,WAAW,EACXI,MFvFa,EEwFbC,cAAe1B,EFxFF,GEyFb4B,IAAK,KAGb,QACI,OAAOM,IClGbY,EAAWC,YAAgB,CAC7BC,UAAWf,IAGTgB,EAAmBC,OAAOC,8BAAgCD,OAAOC,+BAGxDC,EAFDC,YAAYP,EAAUG,GCDvBK,EAAe,WAC1B,MAAQ,CACNd,KAAM9C,I,sBCQK6D,EAfU,WACrB,IAAMC,EAAWC,cAGjB,OAFkBC,aAAY,SAACxB,GAAD,OAAWA,EAAMc,UAAU3B,aAGrD,wBAAQsC,UAAU,eAAeC,QAAS,kBAAMJ,EAASF,MAAzD,mBAIA,wBAAQK,UAAU,eAAeC,QAAS,kBAAMJ,EAASF,MAAzD,oBCCOO,EAVG,WACd,IAAML,EAAWC,cAEjB,OACI,wBAAQE,UAAU,gBAAgBC,QAAS,kBAAMJ,EF2B/C,CACNhB,KAAM3C,KE5BF,kBCMOiE,EAVK,WAChB,IAAMN,EAAWC,cAEjB,OACI,wBAAQE,UAAU,gBAAgBC,QAAS,kBAAMJ,EHQ/C,CACNhB,KAAM7C,KGTF,oBCIOoE,EARK,WAChB,IAAMP,EAAWC,cAEjB,OACI,wBAAQE,UAAU,eAAeC,QAAS,kBAAMJ,EJwC9C,CACNhB,KAAMzC,KIzCF,oBCSOiE,EAXK,WAChB,OACI,gCACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCUGC,EAnBI,WACf,IAAMxC,EAAQiC,aAAY,SAACxB,GAAD,OAAWA,EAAMc,UAAUtB,iBAC/CI,EAAa4B,aAAY,SAACxB,GAAD,OAAWA,EAAMc,UAAUlB,cACpDT,EAAYqC,aAAY,SAACxB,GAAD,OAAWA,EAAMc,UAAU3B,aAEzD,OACI,sBAAKsC,UAAU,YAAf,UAEQtC,EACI,qBAAKsC,UAAU,sBAAf,SAAsClC,IAEtC,qBAAKkC,UAAU,sBAAf,SAAsClC,IAG9C,qBAAKyC,MAAO,CAACC,UAAW,UAAxB,SAAoCrC,QCFjCsC,EAZG,WACd,IAAMnE,EAAOyD,aAAY,SAACxB,GAAD,OAAWA,EAAMc,UAAUrB,gBAC9CI,EAAY2B,aAAY,SAACxB,GAAD,OAAWA,EAAMc,UAAUjB,aAEzD,OACI,sBAAK4B,UAAU,YAAf,UACI,qBAAKA,UAAU,cAAf,SAA8B1D,IAC9B,qBAAK0D,UAAU,cAAf,SAA8B5B,QCG3BsC,EATI,WACf,OACI,sBAAKV,UAAU,cAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,QCyCGW,EA7CE,WACb,IAAM1C,EAAM8B,aAAY,SAACxB,GAAD,OAAWA,EAAMc,UAAUpB,OAC7C4B,EAAWC,cACX5B,EAAc6B,aAAY,SAACxB,GAAD,OAAWA,EAAMc,UAAUnB,eACrDC,EAAa4B,aAAY,SAACxB,GAAD,OAAWA,EAAMc,UAAUlB,cACpDC,EAAY2B,aAAY,SAACxB,GAAD,OAAWA,EAAMc,UAAUjB,aACnDC,EAAY0B,aAAY,SAACxB,GAAD,OAAWA,EAAMc,UAAUhB,aAEnDuC,EAAW3C,EAAI4C,KAAI,SAAC5B,EAAM6B,GAC5B,OACI,+BACI,6BAAK7B,EAAKT,SACV,6BAAKS,EAAKnB,QACV,6BAAKmB,EAAK3C,OAEV,6BAAI,uBACAuC,KAAK,OACLkC,MAAO9B,EAAKN,KACZqC,SAAU,SAACC,GAAD,OAAOpB,GTkBPX,ESlB8B,CAAER,GAAIO,EAAKP,GAAIC,KAAMsC,EAAEC,OAAOH,OTmBhF,CACNlC,KAAM1C,EACN+C,QAASA,KAHgB,IAACA,GSjBVc,UAAU,kBATlB,gBAAkBc,OAe1B,OACI7C,EAAIkD,OAAS,EACT,kCACI,gCACI,+BACI,6BAAKjD,IACL,6BAAKC,IACL,6BAAKC,IACL,6BAAKC,SAGb,gCACKuC,OAIT,MC9BGQ,EAVG,WACd,OACI,sBAAKb,MAAO,CAACc,OAAO,qBAApB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCTG,MAA0B,iCC+B1BC,EA7BA,kBACX,sBAAKtB,UAAU,SAAf,UACI,oBAAGA,UAAU,iBAAb,UAA8B,qBAAKuB,IAAKC,EAAMC,IAAI,OAAOzB,UAAU,SAAnE,eAIA,mBAAGA,UAAU,iBAAb,qDAIA,oBAAGA,UAAU,iBAAb,8CACqC,mBAC7BA,UAAU,OACV0B,KAAK,yCACLR,OAAO,SACPS,IAAI,sBAJyB,oBADrC,QAOa,mBACL3B,UAAU,OACV0B,KAAK,+CACLR,OAAO,SACPS,IAAI,sBAJC,wBAPb,WCCOC,MATf,WACE,OACE,sBAAK5B,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCOS6B,EAVI,WACf,OACI,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUrC,MAAOA,EAAjB,SACI,cAAC,EAAD,SCDhBsC,aAAY,WfYgB,IAACjD,EeX3BW,EAAMI,SfYC,CACLhB,KAAM5C,EACNiD,QAAS,CAAEJ,iBebZ,IAEHkD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1B7G,M","file":"static/js/main.1797dd12.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//Action types\nexport const TOGGLE_TIMER = 'TOGGLE_TIMER'\nexport const RESET_TIMER = 'RESET_TIMER'\nexport const UPDATE_TIMER = 'UPDATE_TIMER'\nexport const UPDATE_CLOCK = 'UPDATE_CLOCK'\nexport const LOG = 'LOG'\nexport const UPDATE_LOG_ITEM = 'UPDATE_LOG_ITEM'\nexport const CLEAR = 'CLEAR'\n\nexport const INITIAL_TIMER = 0 //Date.now() difference\n\n//Views\nexport const ACTION_LABEL = 'Action'\nexport const TIMER_LABEL = 'Timer'\nexport const TIME_LABEL = \"Clock\"\nexport const NOTE_LABEL = 'Comment it!'\n","export const formatTimeDifference = (time) => {\n    const miliseconds = Math.round(time / 100) % 10\n    const seconds = Math.floor(time / 1000) % 60\n    const minutes = Math.floor(time / 1000 / 60) % 60\n    const hours = Math.floor(time / 1000 / 60 / 60) % 24\n    const days = Math.floor(time / 1000 / 60 / 60 / 24)\n\n    const secondsAsString = normalizeNumber(seconds)\n    const minutesAsString = normalizeNumber(minutes)\n    const hoursAsString = normalizeNumber(hours)\n    const daysAsString = normalizeNumber(days)\n\n    return `${daysAsString}:${hoursAsString}:${minutesAsString}:${secondsAsString}.${miliseconds}`\n}\n\nexport const formatTime = (time) => {\n\n    const seconds = time.getSeconds()\n    const minutes = time.getMinutes()\n    const hours = time.getHours()\n\n    const secondsAsString = normalizeNumber(seconds)\n    const minutesAsString = normalizeNumber(minutes)\n    const hoursAsString = normalizeNumber(hours)\n\n    return `${hoursAsString}:${minutesAsString}:${secondsAsString}`\n}\n\nconst normalizeNumber = (number) => {\n    return number < 10 ? \"0\" + number : number;\n}","import { TOGGLE_TIMER } from './constants'\nimport { RESET_TIMER } from './constants'\nimport { UPDATE_TIMER } from './constants'\nimport { LOG } from './constants'\nimport { CLEAR } from './constants'\n\nimport {\n    INITIAL_TIMER, ACTION_LABEL, UPDATE_LOG_ITEM, TIMER_LABEL,\n    TIME_LABEL, NOTE_LABEL\n} from './constants'\nimport { formatTimeDifference, formatTime } from '../../utils/timeUtils'\n\nconst initialState = {\n    isRunning: false,\n    lastUpdateTime: Date.now(),\n    timer: INITIAL_TIMER,\n    formatedTimer: formatTimeDifference(INITIAL_TIMER),\n    formatedTime: formatTime(new Date()),\n    log: [],\n    actionLabel: ACTION_LABEL,\n    timerLabel: TIMER_LABEL,\n    timeLabel: TIME_LABEL,\n    noteLabel: NOTE_LABEL\n}\n\nconst stopwatchReducer = (state = initialState, action) => {\n\n    const log = (action) => {\n        const newLog = [...state.log]\n\n        return (\n            [{\n                id: Date.now(),\n                action: action,\n                timer: formatTimeDifference(state.timer),\n                time: formatTime(new Date()),\n                note: action === 'Reset' ? '' : ''  //Prepared for an automatic description\n            }].concat(newLog)\n        )\n    }\n\n    switch (action.type) {\n\n        case TOGGLE_TIMER:\n            return {\n                ...state, isRunning: !state.isRunning,\n                log: state.isRunning ? log('Pause') : log('Start')\n            }\n\n        case RESET_TIMER:\n            return {\n                ...state,\n                isRunning: false,\n                timer: INITIAL_TIMER,\n                formatedTimer: formatTimeDifference(INITIAL_TIMER),\n                log: log('Reset')\n            }\n\n        case UPDATE_TIMER:\n            const now = Date.now()\n            const deltaTime = now - state.lastUpdateTime\n\n            return state.isRunning ?\n                {\n                    ...state,\n                    timer: state.timer + deltaTime,\n                    formatedTimer: formatTimeDifference(state.timer + deltaTime),\n                    formatedTime: formatTime(new Date()),\n                    lastUpdateTime: now\n                }\n                :\n                {\n                    ...state,\n                    formatedTime: formatTime(new Date())\n                }\n\n        case LOG:\n            return {\n                ...state,\n                log: log('Log')\n            }\n\n        case UPDATE_LOG_ITEM:\n            const index = state.log.findIndex(item => item.id === action.payload.id)\n            const newLog = [...state.log]\n            newLog[index].note = action.payload.note\n\n            return {\n                ...state,\n                log: newLog\n            }\n\n        case CLEAR:\n            return {\n                ...state,\n                isRunning: false,\n                timer: INITIAL_TIMER,\n                formatedTimer: formatTimeDifference(INITIAL_TIMER),\n                log: []\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default stopwatchReducer","import { combineReducers } from 'redux'\nimport stopwatchReducer from './stopwatch/reducers'\nimport { createStore } from 'redux';\n\nconst reducers = combineReducers({\n    stopwatch: stopwatchReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\nconst store = createStore(reducers, composeEnhancers);\n\nexport default store","import { TOGGLE_TIMER } from './constants'\nimport { RESET_TIMER } from './constants'\nimport { UPDATE_TIMER } from './constants'\nimport { UPDATE_CLOCK } from './constants'\nimport { LOG } from './constants'\nimport { UPDATE_LOG_ITEM } from './constants'\nimport { CLEAR } from './constants'\n\nexport const toggle_timer = () => {\n  return ({\n    type: TOGGLE_TIMER\n  })\n}\n\nexport const reset_timer = () => {\n  return ({\n    type: RESET_TIMER\n  })\n}\n\nexport const update_timer = (deltaTime) => {\n  return {\n    type: UPDATE_TIMER,\n    payload: { deltaTime }\n  }\n}\n\nexport const update_clock = () => {\n  return ({\n    type: UPDATE_CLOCK\n  })\n}\n\nexport const log = () => {\n  return ({\n    type: LOG\n  })\n}\n\nexport const updateLogItem = (payload) => {\n  return ({\n    type: UPDATE_LOG_ITEM,\n    payload: payload\n  })\n}\n\nexport const clearLog = () => {\n  return ({\n    type: CLEAR\n  })\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { toggle_timer } from '../../../store/stopwatch/actions'\n\nconst StartPauseButton = () => {\n    const dispatch = useDispatch()\n    const isRunning = useSelector((state) => state.stopwatch.isRunning)\n\n    return isRunning ? (\n        <button className='button-pause' onClick={() => dispatch(toggle_timer())}>\n            Pause\n        </button>\n    ) : (\n        <button className='button-start' onClick={() => dispatch(toggle_timer())}>\n            Start\n        </button>\n    )\n}\n\nexport default StartPauseButton","import { useDispatch } from 'react-redux'\nimport { log } from '../../../store/stopwatch/actions'\n\nconst LogButton = () => {\n    const dispatch = useDispatch()\n\n    return (\n        <button className='button-medium' onClick={() => dispatch(log())}>\n            Log\n        </button>\n    )\n}\n\nexport default LogButton","import { useDispatch } from 'react-redux'\nimport { reset_timer } from '../../../store/stopwatch/actions'\n\nconst ResetButton = () => {\n    const dispatch = useDispatch()\n\n    return (\n        <button className='button-medium' onClick={() => dispatch(reset_timer())}>\n            Reset\n        </button>\n    )\n}\n\nexport default ResetButton","import { useDispatch } from 'react-redux'\nimport { clearLog } from '../../../store/stopwatch/actions'\n\nconst ClearButton = () => {\n    const dispatch = useDispatch()\n\n    return (\n        <button className='button-small' onClick={() => dispatch(clearLog())}>Clear</button>\n    )\n}\n\nexport default ClearButton","import StartPauseButton from './buttons/StartPauseButton'\nimport LogButton from './buttons/LogButton'\nimport ResetButton from './buttons/ResetButton'\nimport ClearButton from './buttons/ClearButton'\n\nconst ButtonPanel = () => {\n    return (\n        <div>\n            <StartPauseButton />\n            <LogButton />\n            <ResetButton />\n            <ClearButton />\n        </div>\n    )\n}\n\nexport default ButtonPanel","import { useSelector } from 'react-redux'\n\nconst TimerValue = () => {\n    const timer = useSelector((state) => state.stopwatch.formatedTimer)\n    const timerLabel = useSelector((state) => state.stopwatch.timerLabel)\n    const isRunning = useSelector((state) => state.stopwatch.isRunning)\n\n    return (\n        <div className='value-box'>\n            {\n                isRunning ? (\n                    <div className='value-large-started'>{timer}</div>\n                ) : (\n                    <div className='value-large-stopped'>{timer}</div>\n                )\n            }\n            <div style={{textAlign: 'center'}}>{timerLabel}</div>\n        </div>\n    )\n}\n\nexport default TimerValue\n","import { useSelector } from 'react-redux'\n\nconst TimeValue = () => {\n    const time = useSelector((state) => state.stopwatch.formatedTime)\n    const timeLabel = useSelector((state) => state.stopwatch.timeLabel)\n\n    return (\n        <div className='value-box'>\n            <div className='value-large'>{time}</div>\n            <div className='value-label'>{timeLabel}</div>\n        </div>\n    )\n}\n\nexport default TimeValue","import TimerValue from './values/TimerValue'\nimport TimeValue from './values/TimeValue'\n\nconst ValuePanel = () => {\n    return (\n        <div className='value-panel'>\n            <TimerValue />\n            <TimeValue />\n        </div>\n    )\n}\n\nexport default ValuePanel\n","import { useSelector, useDispatch } from 'react-redux'\nimport { updateLogItem } from '../../store/stopwatch/actions'\n\nconst LogPanel = () => {\n    const log = useSelector((state) => state.stopwatch.log)\n    const dispatch = useDispatch()\n    const actionLabel = useSelector((state) => state.stopwatch.actionLabel)\n    const timerLabel = useSelector((state) => state.stopwatch.timerLabel)\n    const timeLabel = useSelector((state) => state.stopwatch.timeLabel)\n    const noteLabel = useSelector((state) => state.stopwatch.noteLabel)\n\n    const logItems = log.map((item, i) => {\n        return (\n            <tr key={`timer-${i}`}>\n                <td>{item.action}</td>\n                <td>{item.timer}</td>\n                <td>{item.time}</td>\n\n                <td><input\n                    type='text'\n                    value={item.note}\n                    onChange={(e) => dispatch(updateLogItem({ id: item.id, note: e.target.value }))}\n                    className='log-input' />\n                </td>\n            </tr>\n        )\n    })\n\n    return (\n        log.length > 0 ?\n            <table>\n                <thead>\n                    <tr>\n                        <th>{actionLabel}</th>\n                        <th>{timerLabel}</th>\n                        <th>{timeLabel}</th>\n                        <th>{noteLabel}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {logItems}\n                </tbody>\n            </table>\n            :\n            null\n    )\n}\n\nexport default LogPanel","import ButtonPanel from './ButtonPanel'\nimport ValuePanel from './ValuePanel'\nimport LogPanel from './LogPanel'\n\nconst Stopwatch = () => {\n    return (\n        <div style={{margin:'0px 0px 10rem 0px'}}>\n            <ButtonPanel />\n            <ValuePanel />\n            <LogPanel />\n        </div>\n    )\n}\n\nexport default Stopwatch","export default __webpack_public_path__ + \"static/media/logo.143b9541.ico\";","import logo from '../../logo.ico';\n\nconst Footer = () => (\n    <div className=\"footer\">\n        <p className='footer-heading'><img src={logo} alt=\"logo\" className=\"logo\" />\n            Stopwatch\n        </p>\n\n        <p className='footer-content'>\n            This is a simple stopwatch application.\n        </p>\n\n        <p className='footer-content'>\n            You can find more information on <a\n                className=\"link\"\n                href=\"https://github.com/26bricks/stopwatch/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\">\n                GitHub\n            </a> and <a\n                className=\"link\"\n                href=\"https://hub.docker.com/r/26bricks/stopwatch/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\">\n                Docker Hub\n            </a>\n            .\n        </p>\n    </div>\n)\n\nexport default Footer\n","import './App.scss';\nimport Stopwatch from './components/stopwatch/Stopwatch'\nimport Footer from './components/footer/Footer'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Stopwatch />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import App from '../App';\nimport store from '../store/index';\nimport { Provider } from 'react-redux';\nimport React from 'react';\n\nconst AppWrapper = () => {\n    return (\n        <React.StrictMode>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </React.StrictMode>\n    )\n}\n\nexport default AppWrapper;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/index'\nimport { update_timer } from './store/stopwatch/actions'\nimport AppWrapper from './components/AppWrapper'\n\nsetInterval(() => {\n  store.dispatch(update_timer())\n}, 50)\n\nReactDOM.render(\n  <AppWrapper />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}